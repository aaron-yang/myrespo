package com.automation.demo.test;

import android.app.Activity;
import android.app.Instrumentation;
import android.app.Instrumentation.ActivityMonitor;
import android.content.Intent;
import android.os.PowerManager;
import android.test.InstrumentationTestCase;
import android.view.WindowManager;

import com.automation.demo.LoginActivity;
import com.automation.demo.test.entity.TestCaseEntity;
import com.automation.demo.test.entity.TestCaseEntity.TestCaseStatus;
import com.automation.deom.test.utils.NetworkUtil;
import com.automation.deom.test.utils.UIUtil;
import com.automation.deom.test.utils.Utils;

public class BasicTestCase extends InstrumentationTestCase{
	 private static UIUtil uiUtil = null;
	 private Class<?> startActivity = LoginActivity.class;
	 private static PowerManager.WakeLock wakeScreenObject;
	 private TestCaseEntity testCaseEntity = null;
	 private TestCaseStatus status = TestCaseStatus.UNKNOWN;
	 
	protected void setUp(String testCaseId,String priority) {
		try{
			// TODO Auto-generated method stub
			super.setUp();
			if(wakeScreenObject == null){
				wakeScreenObject = Utils.wakeScreen(this);
			} 
			NetworkUtil.setAirplaneModeOffAndNetworkOn(getInstrumentation().getTargetContext());
			Utils.unlock(getInstrumentation());
			Instrumentation ins = getInstrumentation();
		    ActivityMonitor startScreenMonitor = ins.addMonitor(startActivity.getName(), null, false);
		    Intent intent = new Intent(Intent.ACTION_MAIN);
	        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
	        intent.setClassName(ins.getTargetContext(), startActivity.getName());
		    ins.startActivitySync(intent);
		    final Activity activity = getInstrumentation().waitForMonitor(startScreenMonitor);
			uiUtil = new UIUtil(getInstrumentation(), activity);
			getInstrumentation().runOnMainSync(new Runnable(){

				@Override
				public void run() {
					// TODO Auto-generated method stub
					activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
				}
				
			});
			getInstrumentation().removeMonitor(startScreenMonitor);
			testCaseEntity = new TestCaseEntity(testCaseId, priority);
		}catch(Exception ex){
			status = TestCaseStatus.ERROR;
			uiUtil.takeScreenShot(this.getClass().getSimpleName());
		}
	}
	


	@Override
	protected void runTest(){
        try {
            super.runTest();
        } catch (junit.framework.AssertionFailedError afe) {
            status = TestCaseStatus.FAILURE;
            uiUtil.takeScreenShot(this.getClass().getSimpleName());
            throw afe;
        } catch (android.test.AssertionFailedError aafe) {
            status = TestCaseStatus.FAILURE;
            uiUtil.takeScreenShot(this.getClass().getSimpleName());
            throw aafe;
        } catch (Throwable th) {
            status = TestCaseStatus.ERROR;
            uiUtil.takeScreenShot(this.getClass().getSimpleName());
        }
	}



	@Override
	protected void tearDown()  {
		if (wakeScreenObject != null) {
			wakeScreenObject.release();
			wakeScreenObject = null;
        }
		uiUtil.finishOpenedActivities();
		try {
			uiUtil.finalize();
		} catch (Throwable e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		uiUtil = null;
		Utils.saveTestResult(status,testCaseEntity);
		// TODO Auto-generated method stub
		try {
			super.tearDown();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	protected UIUtil getUIUtil(){
		return uiUtil;
	}

	
}
